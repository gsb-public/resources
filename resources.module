<?php

// Hooks and callbacks for integrating with File Entity module for display.
require_once dirname(__FILE__) . '/includes/resources.formatters.inc';

/**
 * Implements hook_init().
 */
function resources_init() {
  // Include the resources files.
  // Defaults to includes/[resource name].resources.inc you can specify what it
  // should be by specifying include file in hook_resources_type_info().
  // @todo: Find a better way to include this only on pages where resources are actually used. Or at least in hook_init().
  foreach (resources_get_info() as $resource_type => $resource_type_info) {
    $include_file = 'includes/' . $resource_type . '.resources.inc';
    if (!empty($resource_type_info['include file'])) {
      $include_file = $resource_type_info['include file'];
    }

    $include_file = drupal_get_path('module', $resource_type_info['module']) . '/' . $include_file;
    if (file_exists($include_file)) {
      include_once($include_file);
    }
  }
}

/**
 * Implements hook_menu().
 */
function resources_menu() {
  $items = array();

  // Adding a new resource.
  $items['resources/%ctools_js/add/%/%'] = array(
    'title' => 'Add resource',
    'page callback' => 'resources_add',
    'page arguments' => array(1, 3, 4),
    // @todo.
    'access callback' => TRUE,
    'file' => 'includes/resources.overlay_form.inc',
  );
  // Editing a resource.
  $items['resources/%ctools_js/edit/%file'] = array(
    'title' => 'Edit resource',
    'page callback' => 'resources_edit',
    'page arguments' => array(1, 3),
    // @todo.
    'access callback' => TRUE,
    'file' => 'includes/resources.overlay_form.inc',
  );
  // Deleting a resource.
  $items['resources/%ctools_js/delete/%file'] = array(
    'title' => 'Delete resource',
    'page callback' => 'resources_delete',
    'page arguments' => array(1, 3),
    // @todo.
    'access callback' => TRUE,
    'file' => 'includes/resources.overlay_form.inc',
  );

  // Admin form
  $items['admin/config/media/resources'] = array(
    'title' => 'Resources settings',
    'description' => 'Configure the behavior of resources.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('resources_admin_config'),
    'access arguments' => array('administer resources'),
    'file' => 'includes/resources.admin.inc',
  );

  return $items;
}

/**
 * Implement hook_permission().
 */
function resources_permission() {
  return array(
    'administer resources' => array(
      'title' => t('Administer resources'),
      'description' => t('Edit the settings for resources.'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function resources_admin_paths() {
  $paths = array(
    'resources/*/*' => TRUE,
  );
  return $paths;
}

/**
 * Implement hook_resources_type_info().
 *
 * @return array
 */
function resources_resources_type_info() {
  $resource_types['resource_image'] = array(
    'label' => t('Image'),
    'scheme' => 'public',
    'handler' => 'ResourcesLocalFileHandler',
    'upload' => array(
      'file_directory' => 'resources',
      'file_extensions' => 'jpg jpeg gif png',
    ),
    'preview' => TRUE,
  );

  $resource_types['resource_twitter'] = array(
    'label' => t('Twitter'),
    'scheme' => 'twitter',
    'unique_uri' => TRUE,
    'handler' => 'ResourcesTwitterHandler',
    'settings callback' => 'resources_resource_twitter_settings_form',
    'icon' => 'application-twitter.png',
    'icon path' => drupal_get_path('module', 'resources') . '/assets',
  );

  $resource_types['resource_youtube'] = array(
    'label' => t('Youtube'),
    'scheme' => 'ryoutube',
    'handler' => 'ResourcesYoutubeHandler',
    'unique_uri' => TRUE,
    'preview' => TRUE,
  );

  $resource_types['resource_soundcloud'] = array(
    'label' => t('SoundCloud'),
    'scheme' => 'soundcloud',
    'handler' => 'ResourcesSoundCloudHandler',
    'unique_uri' => TRUE,
    'preview' => TRUE,
  );

  return $resource_types;
}

/**
 * Get resources types info array of a resource type.
 *
 * @param null|string $type
 *   The resource type, e.g. resource_twitter, for which the info shall be returned, or NULL
 *   to return an array with info about all types.
 *
 * @return array $info
 *   Resources types info array.
 * @see hook_resources_type_info()
 * @see hook_resources_type_info_alter()
 */
function resources_get_info($type = NULL) {
  $resources_type_info = &drupal_static(__FUNCTION__);

  if (empty($resources_type_info)) {
    if ($cache = cache_get('resources_type_info')) {
      $resources_type_info = $cache->data;
    }
    else {
      $resources_type_info = array();
      foreach (module_implements('resources_type_info') as $module) {
        $resources_type_info_module = module_invoke($module, 'resources_type_info');
        foreach ($resources_type_info_module as &$resource_type_info) {
          // Adding some defaults here.
          $resource_type_info += array(
            'module' => $module,
            'use generic streamwrapper' => FALSE,
            'unique_uri' => FALSE,
            'preview' => FALSE,
            // @todo: Add default icon if none provided.
          );
        }
        $resources_type_info = array_merge($resources_type_info, $resources_type_info_module);
      }
      // Let other modules alter the resources type info.
      drupal_alter('resources_type_info', $resources_type_info);
      cache_set('resources_type_info', $resources_type_info);

      // Copy icons.
      // @todo: Move it to config form as a button or trigger elsewhere.
      _resources_copy_icons();
    }
  }

  if (empty($type)) {
    return $resources_type_info;
  }
  elseif (isset($resources_type_info[$type])) {
    return $resources_type_info[$type];
  }
}

/**
 * Lookup resource type info array by file object.
 *
 * @param stdClass $file
 *   File entity object that contains a valid $file->uri.
 *
 * @return array $info
 *   Resource type info array.
 *
 * @todo Currently we don't restrict and validate scheme to be used only once in resources types.
 *       It will take the first occurrence of 'scheme'. We might want to handle others as well. Find a way how!
 * @todo: resources_get_info_by_file is relying on $file->uri, we need a better way to identify resource type
 */
function resources_get_info_by_file($file) {
  $resources_type_info = resources_get_info();
  $scheme = file_uri_scheme($file->uri);
  foreach ($resources_type_info as $resource_type_info) {
    if ($resource_type_info['scheme'] == $scheme) {
      return $resource_type_info;
    }
  }
}

/**
 * Helper function to copy icons.
 *
 *   - Copies icons from icons directory into publicly available files directory.
 */
function _resources_copy_icons() {
  $destination = variable_get('resources_icons_directory', 'public://resources-assets');

  if (!file_prepare_directory($destination, FILE_CREATE_DIRECTORY)) {
    throw new Exception("Unable to create directory $destination.");
  }

  $resources_type_info = resources_get_info();
  foreach ($resources_type_info as $resource_type_info) {
    if (isset($resource_type_info['icon']) && isset($resource_type_info['icon path'])) {
      $file_uri = $resource_type_info['icon path'] . '/' . $resource_type_info['icon'];
      $result = file_unmanaged_copy($file_uri, $destination, FILE_EXISTS_REPLACE);
      if (!$result) {
        throw new Exception("Unable to copy {$file_uri} to $destination.");
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function resources_theme($existing, $type, $theme, $path) {
  return array(
    'resources_item_list' => array(
      'variables' => array('items' => NULL, 'attributes' => array()),
      'file' => 'resources.theme.inc',
      'path' => $path . '/themes'
    ),
    'resources_item' => array(
      'variables' => array('item' => NULL, 'operations' => array(), 'attributes' => array()),
      'file' => 'resources.theme.inc',
      'path' => $path . '/themes'
    ),
    'resource_youtube_video' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'resource_youtube.theme.inc',
      'path' => $path . '/themes',
      'template' => 'resource-youtube-video',
    ),
    'resource_soundcloud' => array(
      'variables' => array('uri' => NULL, 'options' => array()),
      'file' => 'resource_soundcloud.theme.inc',
      'path' => $path . '/themes',
      'template' => 'resource-soundcloud',
    ),
    'resources_resource_icon' => array(
      'variables' => array('file' => NULL, 'style_name' => NULL),
      'file' => 'resources.theme.inc',
      'path' => $path . '/themes',
    ),
  );
}

/**
 * Formatter view callback for resource icon formatter.
 */
function resources_resource_icon_view($file, $display, $langcode) {
  $element = array(
    '#theme' => 'resources_resource_icon',
    '#file' => $file,
    '#style_name' => $display['settings']['image_style'],
  );

  return $element;
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function resources_resource_icon_settings($form, &$form_state, $settings) {
  $element = array();
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#options' => image_style_options(FALSE),
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
  );
  return $element;
}


/**
 * Implement hook_stream_wrappers().
 */
function resources_stream_wrappers() {
  $stream_wrappers = array();

  $stream_wrappers['twitter'] = array(
    'name' => t('A tweet/feed from twitter'),
    'class' => 'ResourcesTwitterStreamWrapper',
    'description' => t('Tweet/feed provided by Twitter.'),
    'type' => STREAM_WRAPPERS_READ_VISIBLE,
  );

  $stream_wrappers['ryoutube'] = array(
    'name' => t('Resources: YouTube video'),
    'class' => 'ResourcesYouTubeStreamWrapper',
    'description' => t('YouTube video.'),
    'type' => STREAM_WRAPPERS_READ_VISIBLE,
  );

  $stream_wrappers['soundcloud'] = array(
    'name' => t('Resources: SoundCloud'),
    'class' => 'ResourcesSoundCloudStreamWrapper',
    'description' => t('SoundCloud.'),
    'type' => STREAM_WRAPPERS_READ_VISIBLE,
  );

  $stream_wrappers['resource'] = array(
    'name' => t('Resources: Rendered file entity'),
    'class' => 'ResourcesGenericResourceStreamWrapper',
    'description' => t('This stream wrapper doesn\'t do anything, it is just needed for file system to work. We use file entity as a generic entity and rendering just fields.'),
    'type' => STREAM_WRAPPERS_READ_VISIBLE,
  );

  foreach (resources_get_info() as $resource_type_info) {
    if (!empty($resource_type_info['use generic streamwrapper'])) {
      $stream_wrappers[$resource_type_info['scheme']] = array(
        'name' => t('Resources generic Stream Wrapper'),
        'class' => 'ResourcesGenericResourceStreamWrapper',
        'description' => t('This stream wrapper doesn\'t do anything, it is just needed for file system to work. We use file entity as a generic entity and rendering just fields.'),
        'type' => STREAM_WRAPPERS_READ_VISIBLE,
      );
    }
  }

  return $stream_wrappers;
}

/**
 * Render resources browser callback.
 */
function resources_browser($nid, $new_resources = array()) {
  $entity_info = entity_get_info();
  $view_mode_info = $entity_info['file']['view modes'];

  $resources_list_items = array();

  // If we are on the edit form then get all the resources.
  if (isset($nid) && is_numeric($nid)) {
    // Find the resources from the file_usage table.
    $resources_fids = resources_get_resources($nid);
  }
  else {
    $nid = 'new';

    // Display new resources if that's a new node.
    $resources_fids = $new_resources;
  }

  $view_modes_cache = array();
  // Loop through the results to find each fid.
  foreach ($resources_fids as $fid) {
    // Get the file.
    $file = file_load($fid);

    $view_modes = array();

    // If we haven't built the list of view modes for this bundle then build it.
    if (empty($view_modes_cache[$file->type])) {
      // Get all the view mode settings.
      $view_mode_settings = field_view_mode_settings('file', $file->type);
      // Loop through the view modes looking for one's that are enabled.
      foreach ($view_mode_settings as $view_mode => $settings) {
        if ($view_mode !== 'preview' && $settings['custom_settings']) {
          $view_modes[$view_mode] = $view_mode_info[$view_mode]['label'];
        }
      }

      // Cache it so we don't have to build it again if we have the same type.
      $view_modes_cache[$file->type] = $view_modes;
    }
    else {
      // The view mode was in the cache so take it.
      $view_modes = $view_modes_cache[$file->type];
    }

    // Get our markup for the resource preview.
    $resources_list_items[] = _resources_generate_resource_preview_html($file, $view_modes);
  }

  // Add our resources form elements.
  $form['resources'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'resources-browser-wrapper',
      ),
    ),
  );

  $resource_types = resources_get_info();

  // Build the add links.
  $add_links = '';
  foreach ($resource_types as $resource_type => $info) {
    $link = _resources_modal_link($info['label'], 'resources/nojs/add/' . $resource_type . '/' . $nid);
    $add_links .= '<li>' . $link . '</li>';
  }

  $add_resource_link = theme('resources_item', array(
    'item' => '<div class="resource-add-new resource-operations-trigger">' . t('Add New') . '</div>',
    'operations' => '<ul class="resource-operations">' . $add_links . '</ul>',
    'attributes' => array(
      'id' => 'resource-new'
    )
  ));

  $resources = array_merge(array($add_resource_link), $resources_list_items);

  $form['resources']['resources-list'] = array(
    '#theme' => 'resources_item_list',
    '#items' => $resources,
    '#attributes' => array(
      'id' => array('resources-wrapper'),
    )
  );

  return $form;
}

/**
 * Get resources fids by node nid.
 *
 * @param $nid
 * @return $fids
 */
function resources_get_resources($nid) {
  $result = db_query("SELECT fid FROM {file_usage} f WHERE f.id = :nid AND f.module = 'resources'",
    array(':nid' => $nid))->fetchAllAssoc('fid');

  return array_keys($result);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 *   The form.
 * @param $form_state
 *   The form state.
 */
function resources_form_resources_edit_form_alter(&$form, &$form_state) {
  if (isset($form['redirect'])) {
    $form['redirect']['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function resources_form_node_form_alter(&$form, &$form_state) {
  // If this is a new node then add our resources ids text field.
  if (empty($form['nid']['#value'])) {
    $form['resources_ids'] = array(
      '#type' => 'textfield',
      '#title' => t('resource ids'),
    );
  }

  // Add resources javascript and styles.
  $form['#attached']['js'][] = drupal_get_path('module', 'resources') . '/js/resources.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'resources') . '/css/resources.css';

  // Attach resources browser in after_build to have fresh browser when form fails validation as form_alter is not
  // executed once the form is cached.
  $form['#after_build'][] = 'resources_node_form_after_build';
}

/**
 * Node form after build callback.
 *  - Attach resources browser.
 */
function resources_node_form_after_build($form, $form_state) {
  $nid = !empty($form['nid']['#value']) ? $form['nid']['#value'] : 'new';
  // Collect added resources for new node so we can display them in the resources browser.
  $new_resources = array();
  if (!empty($form_state['values']['resources_ids'])) {
    $new_resources = explode(';', $form_state['values']['resources_ids']);
  }
  // Add resources_browser to the node form.
  $form = array_merge($form, resources_browser($nid, $new_resources));

  return $form;
}

/**
 * Implements hook_element_info_alter().
 */
function resources_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'resources_pre_render_text_format';
}

/**
 * Process a text format widget to load and attach editors.
 *
 * The element's #id is used as reference to attach client-side editors.
 */
function resources_pre_render_text_format($element) {
  if (!isset($element['#entity_type']) || $element['#entity_type'] != 'node') {
    return $element;
  }
  // filter_process_format() copies properties to the expanded 'value' child
  // element. Skip this text format widget, if it contains no 'format' or when
  // the current user does not have access to edit the value.
  if (!isset($element['format']) || !empty($element['value']['#disabled'])) {
    return $element;
  }

  $format_field = &$element['format'];
  $formats = array_keys($format_field['format']['#options']);
  // Return original element if none of input formats can handle resources.
  if (!resources_browser_is_available($formats)) {
    return $element;
  }

  $field = &$element['value'];
  $settings = array(
    'field' => $field['#id'],
  );

  // Use a hidden element for a single text format.
  if (!$format_field['format']['#access']) {
    $format_field['resources'] = array(
      '#type' => 'hidden',
      '#name' => $format_field['format']['#name'],
      '#value' => reset($format_field['format']['#options']),
      '#attributes' => array(
        'id' => $format_field['format']['#id'],
        'class' => array('resources-browser'),
      ),
    );
    $format_field['resources']['#attached']['js'][] = array(
      'data' => array(
        'resources' => array(
          'triggers' => array(
            $format_field['format']['#id'] => $settings,
          ),
        ),
      ),
      'type' => 'setting',
    );
  }
  // Otherwise, attach to text format selector.
  else {
    $format_field['format']['#attributes']['class'][] = 'resources-browser';
    $format_field['format']['#attached']['js'][] = array(
      'data' => array(
        'resources' => array(
          'triggers' => array(
            $format_field['format']['#id'] => $settings,
          ),
        ),
      ),
      'type' => 'setting',
    );
  }

  return $element;
}

/**
 * Identify if resources browser is avaiable for any of input formats from provided list.
 * @param array $formats
 *   Array of input format format_ids.
 * @return bool
 *   Returns TRUE if any of passed formats has resources_filter filter enabled.
 */
function resources_browser_is_available($formats) {
  foreach ($formats as $format_id) {
    $filters = filter_list_format($format_id);
    if (!empty($filters['resources_filter']) && $filters['resources_filter']->status) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Implement hook_node_insert().
 */
function resources_node_insert($node) {
  // If resources were added add them to the file usage table.
  if (!empty($node->resources_ids)) {
    // They are concatenated by ;
    $fids = explode(';', $node->resources_ids);

    // Loop through them to add to the usage table.
    foreach ($fids as $fid) {
      $file = new stdClass();
      $file->fid = $fid;
      file_usage_add($file, 'resources', 'node', $node->nid);
    }
  }
}

/**
 * Helper function to generate the html for resources in administration interface.
 *
 * @param $file
 * @param $nid
 * @param array $view_modes
 * @return string
 */
function _resources_generate_resource_preview_html($file, $view_modes = array()) {
  // If we don't have any view modes then find them.
  if (empty($view_modes)) {
    $entity_info = entity_get_info();
    $view_mode_info = $entity_info['file']['view modes'];

    // Get all the view modes for the bundle.
    $view_mode_settings = field_view_mode_settings('file', $file->type);

    // Loop through each view mode to see if they are enabled.
    foreach ($view_mode_settings as $view_mode => $settings) {
      if ($settings['custom_settings'] && $view_mode !== 'preview') {
        $view_modes[$view_mode] = $view_mode_info[$view_mode]['label'];
      }
    }
  }

  $resource_type_default = variable_get('resources_' .  $file->type . '_view_modes', array());
  $resource_type_default = array_flip($resource_type_default);
  $view_modes = array_intersect_key($view_modes, $resource_type_default);

  if (!empty($view_modes)) {
    // Build the view mode options.
    $view_mode_options = '<div class="resource-view-mode-selection"><select>';
    foreach ($view_modes as $view_mode => $label) {
      $view_mode_options .= '<option value="' . $view_mode . '">' . $label . '</option>';
    }
    $view_mode_options .= '</select></div>';
  }

  // Render a preview of the file.
  // Bypass browser file cache @see https://www.drupal.org/node/2313539
  $file->cache = FALSE;
  $view_mode = variable_get('resources_browser_preview_view_mode', 'preview');
  $file_render_array = file_view_file($file, $view_mode);
  $rendered_file = drupal_render($file_render_array);

  // Get operations.
  $operations_list = _resources_resource_get_operations($file);

  $item  = '';
  $item .= '<span class="resource-name" title="' . $file->filename . '">' . truncate_utf8($file->filename, 20,  FALSE, TRUE) . '</span>';
  $item .= '<div class="resource-preview resource-operations-trigger">' . $rendered_file . '</div>';
  $item .= !empty($view_mode_options) ? $view_mode_options : '';

  $output = theme('resources_item', array(
    'item' => $item,
    'operations' => $operations_list,
    'attributes' => array(
      'id' => array('resource-' . $file->fid),
    )
  ));

  return $output;
}

/**
 * Build resource operations helper.
 */
function _resources_resource_get_operations($file) {
  // build the operation links.
  $attributes = array(
    'class' => array(
      'resource-insert',
    ),
    'data-resource-info' => '[[resource::fid:' . $file->fid . '::name:' . $file->filename . '::type:' . $file->type . '::display:',
  );
  $add_link = l(t('Insert'), '#', array('attributes' => $attributes, 'external' => TRUE));
  $edit_link = _resources_modal_link(t('Edit'), 'resources/nojs/edit/' . $file->fid);
  $delete_link = _resources_modal_link(t('Delete'), 'resources/nojs/delete/' . $file->fid);

  $operations_list = theme('item_list', array(
    'attributes' => array('class' => array('resource-operations')),
    'items' => array($add_link, $edit_link, $delete_link),
  ));

  return $operations_list;
}

/**
 * Implements hook_filter_info().
 */
function resources_filter_info() {
  $filters['resources_filter'] = array(
    'title' => t('Convert Resources tags to markup'),
    'description' => t('This filter will convert [[resource::]] tags into markup.'),
    'process callback' => 'resources_filter',
    'weight' => 2,
  );

  return $filters;
}

/**
 * Filter callback for media markup filter.
 *
 * @TODO check for security probably pass text through filter_xss
 */
function resources_filter($text) {
  // Strip the p tags around resources if that's all that's around it.
  $text = preg_replace_callback('/<p>\[\[resource::.*?\]\]<\/p>/', 'resources_strip_p', $text);
  // Replace the resource.
  $text = preg_replace_callback('/\[\[resource::.*?\]\]/s', 'resources_token_to_markup', $text);
  return $text;
}

/**
 * Replace p tags around resources if that's the only thing that surrounds it.
 *
 * @param $match
 * @return replaced element.
 */
function resources_strip_p($match) {
  return strip_tags($match[0]);
}

/**
 * Replace callback to convert a resource tag into HTML markup.
 *
 * @param string $match
 *   Takes a match of tag code
 *
 * @return string
 *   The HTML markup representation of the tag, or an empty string on failure.
 *
 */
function resources_token_to_markup($match) {
  // Strip brackets
  $match = str_replace("[[", "", $match);
  $match = str_replace("]]", "", $match);
  $tag = $match[0];

  // Split up the bigger piecew.
  $options = explode('::', $tag);
  $parameters = array();

  // Loop through all the tag/value sets.
  foreach ($options as $index => $option) {
    // Make sure we are not on the first one.
    if ($index > 0) {
      // Find the key value pairs.
      $option_value = explode(':', $option);

      $key = array_shift($option_value);
      $value = implode(':', $option_value);
      $parameters = array_merge($parameters, array($key => $value));
    }
  }

  try {
    // Ensure we have a file id.
    if (!isset($parameters['fid'])) {
      throw new Exception('No file Id');
    }

    // Ensure a valid view mode is being requested.
    if (!isset($parameters['display'])) {
      throw new Exception('No display');
    }

    $file = file_load($parameters['fid']);
    if (!$file) {
      throw new Exception('Could not load resource object');
    }
    $parameters['file'] = $file;
  }
  catch (Exception $e) {
    watchdog('resources', 'Unable to render resource from %tag. Error: %error', array('%tag' => $tag, '%error' => $e->getMessage()));
    return '';
  }

  // Render the file.
  $element = file_view($parameters['file'], $parameters['display']);
  return drupal_render($element);
}

/**
 * Helper function for a modal link.
 *
 * @param string $text
 * @param string $url
 *
 * @return string
 */
function _resources_modal_link($text, $url) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  return ctools_modal_text_button($text, $url, $text);
}

/**
 * Callback for when the file is saved.
 *  - This callback is used to save any resource with a hash-like URL, that
 *    does not require URL parsing.
 * @todo: Move to handler class.
 * @param $file
 * @param $form
 * @param $form_state
 * @return bool|object
 */
function resources_generic_resource_presave($file, $form, $form_state, $resource_type_info) {
  if (empty($file->uri)) {
    $uri = $resource_type_info['scheme'] . '://' . 'h/' . uniqid();
    $new_file = file_uri_to_object($uri, FALSE);
    $new_file->type = $file->type;
    $new_file->display = $file->display;
    $new_file->filename = $file->filename;
  }
  else {
    $new_file = $file;
  }

  return $new_file;
}

/**
 * Implements hook_file_presave().
 *
 *  - Add a unique hash when using remote URIs, so we can add the same resource twice with same URI.
 */
function resources_file_presave($file) {
  $resource_type_info = resources_get_info_by_file($file);

  // Append a hash when saving files so that URI is unique,
  // this in needed in order to create new resources with same URI and not reuse existing.
  if (isset($resource_type_info['unique_uri']) && $resource_type_info['unique_uri']) {
    if (isset($file->original)) {
      $pattern = '/\/hash\/[^\/]+$/';
      if (preg_match($pattern, $file->original->uri, $matches)) {
        $existing_hash = $matches[0];
      }
    }
    if (!empty($existing_hash)) {
      $file->uri .= $existing_hash;
    }
    else {
      $file->uri .= '/hash/' . uniqid();
    }
  }
}

/**
 * Factory for resource type handler
 *  - Instantiates a resource type handler from provided resource type and $file.
 *
 * @TODO: Move to ResourcesResourceBaseHandler as static factory method.
 */
function resources_get_type_handler($type, stdClass $file) {
  $resource_type_info = resources_get_info($type);
  if (!empty($resource_type_info['handler']) && class_exists($resource_type_info['handler'])) {
    return new $resource_type_info['handler']($file, $resource_type_info);
  }
}

/**
 * Base ResourcesResourceBaseHandler class.
 *
 * Resource types handlers should extend this class to parse, validate and save resources.
 */
abstract class ResourcesResourceBaseHandler {

  /**
   * The constructor for the ResourcesResourceBaseHandler class. This method is also called
   * from the classes that extend this class and override this method.
   */
  public function __construct() {

  }

  /**
   * Returns a file object which can be used for validation and saving.
   *
   * @return StdClass
   */
  abstract public function getFileObject();

  /**
   * If required, implementors can validate resources fields.
   */
  public function validate() {
  }

  /**
   * Before the file has been saved, implementors may do additional operations.
   *
   * @param object $file_obj
   */
  public function preSave(&$file_obj) {
  }

  /**
   * Saves a file to the file_managed table (with file_save).
   *
   * @return StdClass
   */
  public function save() {
    $file_obj = $this->getFileObject();
    $this->preSave($file_obj);
    file_save($file_obj);
    $this->postSave($file_obj);
    return $file_obj;
  }

  /**
   * After the file has been saved, implementors may do additional operations.
   *
   * @param object $file_obj
   */
  public function postSave(&$file_obj) {
  }
}

/**
 * Class ResourcesValidationException.
 *   - Basic exception class for resources validation exceptions.
 */
class ResourcesValidationException extends Exception {}
